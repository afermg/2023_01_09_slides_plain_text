#+title: How I learned to top worrying and love plain text
#+OPTIONS: ^:nil toc:nil
#+BEAMER_THEME: metropolis

* Goal
Showcase plain text and its tools as a useful alternative more complex formats and tools.

* What do I mean by plain text?
- I define "Plain text" as data represented by readable characters and in a human-readable format.
-  It is understandable without an specialised tool.
* To be more specific:
:PROPERTIES:
:BEAMER_ACT: <+->
:END:
** Examples:
:PROPERTIES:
:BEAMER_col: 0.5
:BEAMER_ACT: <+->
:END:
  - Markdown
  - CSV files
  - Source code (pre-compilation)

** Examples of what it is not:
:PROPERTIES:
:BEAMER_col: 0.5
:BEAMER_ACT: <+->
:END:
- Data containing floating points
- Images
- Html

* It offers multiple benefits
- Universal
- Lightweight
- Portable
- The maintenance cost of its toolsets is lower than GUIs

* Plain text may not be interesting at first
#+ATTR_LATEX: :width 0.9\textwidth
[[./figs/chart.png]]
* Essential text processing tools
- *cat* (\plus{}tac): print file (or reverse lines)
- *head/tail*: print first/last n lines of file
- *rev*: Reverse lines
- *wc*: Count words/lines/characters
- *sort*: Sort lines
- *uniq*: Get unique lines
- *tr*: Replace/delete characters
- *grep* (\plus{}ripgrep): Select lines
- *cut*: Select columns
- *paste*: Combine documents or the lines in one

* Additional useful tools
# Anything you use data processing processing you can use to process your notes
- *tee*: Read from stdin and write to stdout and files.
- *sponge*: Recycle input file when processing (moreutils package)
- *jq*: Query json files/stdin
- *sed*: Standard editor, useful for simple edits with no variables
- *awk*: Versatile programming language for more complex queries
- *perl* (\plus{}python): Languages for complex one-line queries

* Overview of plain text tools/interfaces
Interfaces minimise friction between processes
- Modal editing
- Git interfaces: Magit (Emacs), Fugitive (Vim), LazyGit (CLI)
- File management interfaces

* File management
\href{run:./figs/1_demo_dired_wdired.mp4}{We can rename files in bulk}
\href{run:./figs/2_demo_tramp.mp4}{Access server data remotely}

* File management
- Most operations do not require complex graphical interfaces
- Anything a terminal could ssh into, but pretend it is local

* Plain text can be a git interface

\href{run:./figs/4_demo_git.mp4}{Adding a file to repository}
* Plain text can be a git interface
- Git operations become routine
- Select specific code regions to commit
- Explore previous versions
- Issues and requests included
- Learn git as you go, it shows the commands you invoke
- Alternatives: fugitive (Vim), lazygit (TUI)

* Diff and Undo
\href{run:./figs/4_undo_tree.mp4}{Visualise file differences in undo}

* Modal editing
** Use regular expressions to find and replace regions
** change, surround, replace, exchange, text becomes objects to edit
** Code folding

* There is a markup language for cooking
#+ATTR_LATEX: :width 0.5\textwidth
[[./figs/cooking.png]]

* Many text tools improve the Python development experience
** black: auto-formatting
** isort: Sort imports
** jupytext:  Jupyter Notebook <-> Python script
** LSP (Language Server Protocol): Code linter
** Live coding interface
* Plain text can:
** Run notebooks with multiple languages
** Include bibliography
** Task management
** Visualise undo trees
** Basic spreadsheets
** Run timers and deltas
** Note forwards and backlinks

* Where does plain text underperform?
- Review/Collaboration (e.g., GDrive review tools)
- Visualisation of complex data (e.g., plotting dense data)
- Replacing structured data (e.g., spreadsheets, big data frames)
* Other things that plain text is capable of
- Bibliography management
- Database of personal notes
- RSS (Really Simple Syndication)
* Does it actually make a difference?
Depends on one's workflow, but mid and long-term it reduces friction when processing data and accessing computing resources anywhere.
* Conclusions
** Why is fast feedback important for data scientists and software engineers?
** As portable as it gets
** Can be converted to any other format
** Version control!
** Lowers the feeling working on a server vs a  local machine

* Resources
- [[https://github.com/tldr-pages/tldr][tldr]]: DIsplay simple pages for command line tools
- [[https://github.com/jesseduffield/lazygit][lazygit]]: Git command line interface
- [[https://github.com/mwouts/jupytext][jupytext]]: Jupyter notebooks <-> plain text
- [[https://jpospisil.com/2023/12/19/the-hidden-gems-of-moreutils][moreutils]]: Additional CLI tools
- [[http://mermaid.js.org/][mermaid]]: Generate diagrams from plain text (Github renders)
- [[https://pandoc.org/][pandoc]]: Convert markup languages into each other
- [[https://github.com/captn3m0/plaintext-everything][plain-text-everything]]: List of other projects that use plain text

* Other fun tools
- *more/less*: Look at file, also interactively
- *screen*: Run background sessions and restart them
- *du*: Check folder size
- *fzf*: command fuzzy finder
- *fish*: bash with QOL improvements (not always compatible with bash/zsh)
- *htop/btop*: process management
- *rsync*: Synchronise copies of the same files
- *parallel*: Use multiple cores
- *csvtools*: Tools for CSV
